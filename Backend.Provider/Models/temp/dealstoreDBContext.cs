// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace DealStoreweb.Backend.Models
{
    public partial class DealstoredbContext : DbContext
    {
        public DealstoredbContext()
        {
        }

        public DealstoredbContext(DbContextOptions<DealstoredbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CategoryTbl> CategoryTbls { get; set; }
        public virtual DbSet<CustomerTbl> CustomerTbls { get; set; }
        public virtual DbSet<ProviderTbl> ProviderTbls { get; set; }
        public virtual DbSet<RequestTbl> RequestTbls { get; set; }
        public virtual DbSet<ServiceTbl> ServiceTbls { get; set; }
        public virtual DbSet<UserTbl> UserTbls { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<CategoryTbl>(entity =>
            {
                entity.ToTable("CategoryTbl");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<CustomerTbl>(entity =>
            {
                entity.ToTable("CustomerTbl");

                entity.Property(e => e.CreatedDatetimeOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdatedDatetimeOn).HasColumnType("datetime");

                entity.HasOne(d => d.UserRefNavigation)
                    .WithMany(p => p.CustomerTbls)
                    .HasForeignKey(d => d.UserRef)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomerTbl_UserTbl");
            });

            modelBuilder.Entity<ProviderTbl>(entity =>
            {
                entity.ToTable("ProviderTbl");

                entity.Property(e => e.CompanyLogo).HasMaxLength(200);

                entity.Property(e => e.CompanyName).HasMaxLength(100);

                entity.Property(e => e.CreatedDatetimeOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Occupation).HasMaxLength(100);

                entity.Property(e => e.UpdatedDatetimeOn).HasColumnType("datetime");

                entity.HasOne(d => d.UserRefNavigation)
                    .WithMany(p => p.ProviderTbls)
                    .HasForeignKey(d => d.UserRef)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProviderTbl_UserTbl");
            });

            modelBuilder.Entity<RequestTbl>(entity =>
            {
                entity.ToTable("RequestTbl");

                entity.Property(e => e.CreatedDatetimeOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('NEW')");

                entity.Property(e => e.UpdatedDatetimeOn).HasColumnType("datetime");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.RequestTbls)
                    .HasForeignKey(d => d.ServiceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestTbl_ServiceTbl");

                entity.HasOne(d => d.UserRefNavigation)
                    .WithMany(p => p.RequestTbls)
                    .HasForeignKey(d => d.UserRef)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestTbl_UserTbl");
            });

            modelBuilder.Entity<ServiceTbl>(entity =>
            {
                entity.ToTable("ServiceTbl");

                entity.Property(e => e.CreatedDatetimeOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description_Short).HasMaxLength(250);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdatedDatetimeOn).HasColumnType("datetime");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ServiceTbls)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTbl_CategoryTbl");

                entity.HasOne(d => d.UserRefNavigation)
                    .WithMany(p => p.ServiceTbls)
                    .HasForeignKey(d => d.UserRef)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTbl_UserTbl");
            });

            modelBuilder.Entity<UserTbl>(entity =>
            {
                entity.HasKey(e => e.UserRef)
                    .HasName("PK_Table");

                entity.ToTable("UserTbl");

                entity.Property(e => e.UserRef).ValueGeneratedNever();

                entity.Property(e => e.Adress).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CreatedDatetimeOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Firstname)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.UpdatedDatetimeOn).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserPass)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Zip).HasMaxLength(10);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}